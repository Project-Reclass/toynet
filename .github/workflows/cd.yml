name: cd

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  workflow_run:
    workflows: ["react-dockerhub", "flask-dockerhub"]
    branches: [main]
    types:
      - completed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-react-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: frontend
          image: docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REACT_IMAGE_NAME }}:${{ github.sha }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-flask-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: backend
          image: docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_FLASK_IMAGE_NAME }}:${{ github.sha }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-mininet-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: mininet
          image: docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_MININET_IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-mininet-definition.outputs.task-definition }}
          service: toynet-service
          cluster: ToyNet
          wait-for-service-stability: true
